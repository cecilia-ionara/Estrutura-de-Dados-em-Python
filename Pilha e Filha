{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1vw7eXPLX43WL_2CULSzRNnpMVANcKmTH","timestamp":1730724320746}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Atividade - pilha <h1>\n"],"metadata":{"id":"7JJE3Nl9OzPU"}},{"cell_type":"markdown","source":["### Questão 1\n","Questão 1: Verificação de Parênteses Balanceados\n","Crie uma função chamada verificar_balanceamento que verifica se uma string contém\n","parênteses, colchetes e chaves balanceados. Para que a string seja considerada\n","balanceada:\n","● Todo parêntese de abertura ( deve ter um correspondente de fechamento ).\n","● Todo colchete de abertura [ deve ter um correspondente de fechamento ].\n","● Toda chave de abertura { deve ter um correspondente de fechamento }.\n","● Os caracteres de abertura e fechamento devem estar corretamente aninhados (ou\n","seja, [{()}] é válido, mas [({)]} não é).\n","Você deve usar uma pilha para implementar essa verificação. A função deve retornar True\n","se os parênteses estiverem balanceados e False caso contrário."],"metadata":{"id":"9seJxcfjavSF"}},{"cell_type":"code","source":["def verificar_balanceamento(string):\n","    pilha = []\n","\n","    pares = {')': '(', ']': '[', '}': '{'}\n","\n","    # Percorre cada caractere na string\n","    for caractere in string:\n","        # caractere de abertura\n","        if caractere in '([{':\n","            pilha.append(caractere)\n","        # caractere de fechamento\n","        elif caractere in ')]}':\n","            # verifica se está vazia ou se o topo da pilha não corresponde ao fechamento\n","            if not pilha or pilha[-1] != pares[caractere]:\n","                return False\n","            # remove o topo da pilha (par correspondente encontrado)\n","            pilha.pop()\n","\n","    # Verifica se a pilha está vazia\n","    if not pilha:\n","        return True #todos os pares removidos\n","    else:\n","        return False\n","\n","# Exemplos testando a função\n","print(verificar_balanceamento(\"{[()]}\"))  # Saída: True\n","print(verificar_balanceamento(\"{[(])}\"))  # Saída: False\n","print(verificar_balanceamento(\"((()))\"))  # Saída: True\n"],"metadata":{"id":"EWVXdFujO7p0","executionInfo":{"status":"ok","timestamp":1738287800733,"user_tz":180,"elapsed":279,"user":{"displayName":"cecilia ionara","userId":"18241381883788947594"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bdfe52cb-1f39-4a1e-fe31-ea6653c8c4b8"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n","True\n"]}]},{"cell_type":"markdown","source":["### Questão 2\n","Questão 2: Reversão de uma String Usando Pilha\n","Implemente uma função chamada reverter_string que recebe uma string\n","como entrada e retorna a string invertida. A inversão deve ser realizada utilizando\n","uma pilha como estrutura de dados. Não é permitido usar métodos embutidos de\n","reversão, como [::-1] ou a função reversed().\n","\n"],"metadata":{"id":"YtP_uQauP0LK"}},{"cell_type":"code","source":["def reverter_string(string):\n","    pilha = []\n","\n","    # adicionarcada caractere da string na pilha\n","    for caractere in string:\n","        pilha.append(caractere)\n","\n","    string_invertida = \"\"\n","\n","    # remover os caracteres da pilha e adicionar na string invertida\n","    while pilha:\n","        string_invertida += pilha.pop()  # remove o último elemento da pilha e adiciona\n","\n","    return string_invertida\n","\n","# Exemplos testando a função\n","print(reverter_string(\"pilha\"))     # Saída: \"ahlip\"\n","print(reverter_string(\"python\"))    # Saída: \"nohtyp\"\n","print(reverter_string(\"Estrutura\")) # Saída: \"aruturtse\"\n"],"metadata":{"id":"xh6yp-aeQYAQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Questão 3 - fila\n"],"metadata":{"id":"Mit3dSsxQaSO"}},{"cell_type":"code","source":["from collections import deque\n","\n","def gerar_variacoes_senha(senha):\n","    fila = deque(senha)\n","\n","    # gera a Saída 1\n","    saida1 = []\n","    while fila:\n","        saida1.append(fila.pop())  # remove o último elemento da fila e adiciona à saída 1\n","\n","    # gera a Saída 2\n","    fila = deque(senha)  # volta pra fila original\n","    saida2 = []\n","    while fila:\n","        saida2.append(fila.popleft())  # remove o primeiro elemento da fila e adiciona à saída 2\n","\n","    return \" \".join(saida1), \" \".join(saida2) #join formata a fila\n","\n","# senha a ser usada o teste\n","senha = \" AB5C239DEF\"\n","\n","# Gera as variações\n","saida1, saida2 = gerar_variacoes_senha(senha)\n","\n","# Imprime os resultados\n","print(\"Saída 1:\", saida1)  # Saída 1: F E D 9 3 2 C 5 B A\n","print(\"Saída 2:\", saida2)  # Saída 2: A B 5 C 2 3 9 D E F\n"],"metadata":{"id":"9sJO2m9FR7Sy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1738287550625,"user_tz":180,"elapsed":226,"user":{"displayName":"cecilia ionara","userId":"18241381883788947594"}},"outputId":"cf8220ab-770b-4d11-a43b-1b7cc2edf569"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Saída 1: FED932C5BA \n","Saída 2:  AB5C239DEF\n"]}]},{"cell_type":"markdown","source":["### Questão 4\n"],"metadata":{"id":"jPJzjYRtSDlO"}},{"cell_type":"code","source":[],"metadata":{"id":"PDdXff2JSOJm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Questão 5\n"],"metadata":{"id":"B_jLdgn9SfEO"}},{"cell_type":"code","source":[],"metadata":{"id":"rlPREFp2SqLT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Questão 6\n","\n"],"metadata":{"id":"n_pC4sy_XRwJ"}},{"cell_type":"code","source":[],"metadata":{"id":"XawhPPWG_BmQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Questão 7\n","\n","\n"],"metadata":{"id":"zY4ino3_-sSs"}},{"cell_type":"code","source":[],"metadata":{"id":"ktZ5vZc5-Q2_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Questão 8\n","\n"],"metadata":{"id":"d8JPIky6-vGG"}},{"cell_type":"code","source":[],"metadata":{"id":"Rl5Bp6KZ_CcZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Questão 9\n","\n","\n"],"metadata":{"id":"2NG5n0ft-xUi"}},{"cell_type":"code","source":[],"metadata":{"id":"QhmIxZuh_ENQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Questão 10\n","\n","\n"],"metadata":{"id":"h_9ALRRj_Hig"}},{"cell_type":"code","source":[],"metadata":{"id":"N3WbHILh_REq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### CÓDIGO FINAL\n","\n","\n"],"metadata":{"id":"_EwnREt9_Ji5"}},{"cell_type":"code","source":["##Inicio questão 1##\n","eventos = []\n","proximoID = 1\n","\n","def cadastrar_evento(nome, data, local, capacidade_maxima):\n","    global proximoID\n","    evento = {\n","        \"id\": proximoID,\n","        \"nome\": nome,\n","        \"data\": data,\n","        \"local\": local,\n","        \"capacidade_maxima\": capacidade_maxima\n","    }\n","    eventos.append(evento)\n","    proximoID += 1\n","    print(f\"Evento '{nome}' cadastrado com sucesso!\")\n","\n","    cadastrar_evento(\"Workshop Python\", \"2025-02-10\", \"São Paulo\", 100)\n","    cadastrar_evento(\"Palestra IA\", \"2025-03-05\", \"Belo Horizonte\", 200)\n","\n","    for evento in eventos:\n","        print(evento)\n","##Final questão 1##\n","\n","##Inicio da questao 2\n","class GerenciadorDeInscricoes:\n","    def __init__(self):\n","        self.inscricoes = set()\n","\n","    def inscrever_participante(self, id_participante, nome_participante, id_evento):\n","        inscricao = (id_participante, nome_participante, id_evento)\n","\n","        if inscricao in self.inscricoes:\n","            print(f\"Erro: O participante {nome_participante} (ID: {id_participante}) já está inscrito no evento {id_evento}.\")\n","        else:\n","            self.inscricoes.add(inscricao)\n","            print(f\"Sucesso: {nome_participante} foi inscrito no evento {id_evento}.\")\n","\n","    def listar_inscricoes(self):\n","        if self.inscricoes:\n","            print(\"Inscrições atuais:\")\n","            for inscricao in self.inscricoes:\n","                print(f\"ID Participante: {inscricao[0]}, Nome: {inscricao[1]}, ID Evento: {inscricao[2]}\")\n","        else:\n","            print(\"Nenhuma inscrição registrada.\")\n","##Final da questao 2 ---- organizar em ordem e depois apagar esses comentarios ---------"],"metadata":{"id":"L-rhs2Db_RfJ"},"execution_count":null,"outputs":[]}]}